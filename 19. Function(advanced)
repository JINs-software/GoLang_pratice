[가변 인수 함수]

fmt 패키지의 Println 함수는 인수 갯수가 정해져 있지 않음
- fmt.Println()
- fmt.Println(1)
- fmt.Println(1,2,3,4,5,6,7 ..)
이와 같이 함수 인수 갯수가 고정적이지 않은 함수를 "가변 인수 함수(variadic function)"이라 함

- '...' 키워드 사용
    - '...' 키워드를 사용하여 가변 인수 처리 가능
    - 인수 타입 앞에 ...를 붙여서 해당 타입 인수를 여러 개 받는 가변 인수임을 표시

    func sum(nums ...int) int {         // 가변 인수를 받는 함수
        sum := 0
        fmt.Printf("nums 타입: %T\n", nums) // nums 타입 출력 -> "[]int"
        for _, v := range nums {
            sum += v
        }
        return sum
    }
    
    - sum() 함수 내부에서 nums는 'int 슬라이스 타입인 []int'로 처리됨
    - 즉, 가변 인수는 함수 내부에서 '해당 타입의 슬라이스'로 처리!

- '...interface{}'
    - fmt.Println(2, "hello", 3.14) 같이 여러 타입의 인수를 한꺼번에 섞어 사용할 수 있다. 
    - 빈 인터페이스(interface{})를 사용한다. 모든 타입은 빈 인터페이스를 포함하고 있다.
    - 빈 인터페이스 가변 인수 ...interface{} 타입으로 받으면 모든 타입의 가변 인수를 받을 수 있다. 
    - 그리고 함수 내부에서 인터페이스 변환 기능을 이용하여 타입별로 다르게 동작시키는 것이다.

    func Print(args ...interface{}) string {
        for _, arg := range args [
            switch f := arg.(type) {    // 타입 별 switch
            case bool:
                val := arg.(bool)   // 인터페이스 -> concrete type으로 변환
                ...
            case float64:
                var := arg.(float64)    
                ...
            case int:
                var := arg.(int)
                ...
            case ...
                ...
            }
        ]
    }

-------------------------------------------------------------------------------------------------------

[defer 지연 실행]

파일이나 소켓 핸들처럼 OS 내부 자원을 사용하는 경우 사용되는 함수가 종료되기 전 자원을 반환해야 한다.
(ex, 파일 생성하거나 읽을 때 OS에 파일 핸들을 요청, OS는 파일 핸들을 만들어 프로그램에 알림)
(OS 내부 자원을 반환하지 않으면 내부 자원이 고갈되어 더 이상 파일을 만들거나 읽지 못함)

이처럼 함수 종료 전 처리해야 하는 코드가 있을 때 'defer'를 사용해 실행할 수 있다. 
    "defer 명령문"

    func main() {
        f, err := os.Create("text.txt")     // 파일 생성
        // 에러 처리 ..

        // defer를 통해 지연 수행될 코드
        // 주의할 점은 순서는 역순으로 실행된다는 것
        defer fmt.Println("반드시 호출됨!) 
        defer f.Close() 
        defer fmt.Println("파일을 닫았습니다.)

        // 파일 핸들 'f'를 통한 각종 작업 수행
        // ...
    }

-------------------------------------------------------------------------------------------------------

[함수 타입 변수(함수 포인터)]
- 함수 타입 변수란 함수를 값으로 갖는 변수를 의미. '함수 포인터'와 같다.
- 함수 타입은 함수명과 함수 코드 블록을 제외한 '함수 정의(signature)로 표시함

    func add(a, b int) int {
        return a + b
    }

    // 함수 포인터
    func (int, int) int 

- 예시
    func add(a, b int) int {
        return a + b
    }
    func mul(a, b int) int {
        return a * b
    }

    func getOperator(op string) func (int, int) int {   // "op"에 따른 함수 타입(포인터) 반환
        if op == "+" {
            return add
        } else if op == "*" {
            return mul
        } else  {
            return nil
        }
    }

    func main() {
        var operator func (int, int) int
        operator = getOperator("*")

        var result = operator(3, 4)
        fmt.Println(result)
    }

-------------------------------------------------------------------------------------------------------

[함수 리터럴]

- 함수 리터럴: 이름 없는 함수로 함수명을 적지 않고 함수 타입 변수값으로 대입되는 함수값
- 함수명이 없기에 함수명으로 직접 호출할 수 없고, 함수 타입 변수로만 호출됨
  (흔히 익명 함수 또는 람다라고 불리는 것)
- 19_FunctionAdvanced/functionLiteral/functionLiteral.go 참고

- 함수 리터럴 내부 상태
    - 함수 리터럴은 필요한 변수를 내부 상태로 가질 수 있다. 
    - 함수 리터럴 내부에서 사용되는 외부 변수는 자동으로 함수 내부 상태로 저장됨

    func main() {
        i := 0
        f := func() {
            i += 10     // i 변수는 함수 내부에 있지 않는 외부 변수
                        // 함수 리터럴 내부에서 외부 변수인 i에 접근
                        // 함수 리터럴 내부에서 외부 변수에 접근할 때 필요한 변수를 내부 상태로 가져와 접근 가능
            
        }

        i++
        f()    // 'f' 함수 타입 변수를 사용하여 함수 리터럴 실행

        fmt.Println(i)
    }

